(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{188:function(t,a,e){"use strict";e.r(a);var n=e(0),s=Object(n.a)({},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"セレクトボックス-プルダウン-を外部ファイルから作成＋リストのデータを取得-javascript"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#セレクトボックス-プルダウン-を外部ファイルから作成＋リストのデータを取得-javascript","aria-hidden":"true"}},[t._v("#")]),t._v(" セレクトボックス(プルダウン)を外部ファイルから作成＋リストのデータを取得(JavaScript)")]),t._v(" "),e("hr"),t._v(" "),e("h1",{attrs:{id:"選択肢を別ファイルで管理したい"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#選択肢を別ファイルで管理したい","aria-hidden":"true"}},[t._v("#")]),t._v(" 選択肢を別ファイルで管理したい")]),t._v(" "),e("p",[t._v("ユーザに数値を入力させる場合、セレクトボックス（プルダウン）があると楽。\nだが、選択肢とそれに付随する数値が固定なら直接タグに書き込めばよいが、選択肢や数値が可変で外部ファイルとして管理したい場合がある。\nその場合は、リストを格納している配列を別ファイルで作成し、読みだしてあげればい良い。\njQueryなどを使えばもう少しスマートに書けると思うが、自分の環境で導入ができなかったから素のJavaScriptでやる。")]),t._v(" "),e("h2",{attrs:{id:"htmlを開いた時だけ別ファイルから読みだす"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#htmlを開いた時だけ別ファイルから読みだす","aria-hidden":"true"}},[t._v("#")]),t._v(" HTMLを開いた時だけ別ファイルから読みだす")]),t._v(" "),e("p",[t._v("クリック時など細かく設定することもできるが、よほどのことがない限り一回読み出せば用済みになる。\n一回だけ読みたい場合は、bodyタグなどにonload要素で実行させるればよい。")]),t._v(" "),e("div",{staticClass:"language-選択肢表示.html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<body onload="readFirst()">\n <select id="PullDownList"></select>\n</body>\n')])])]),e("div",{staticClass:"language-一度だけ実行(セレクトボックスが1つだけの場合).js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('function readFirst(){\n    //プルダウンリストをループ処理で値を取り出してセレクトボックスにセットする\n    for(var i=0;i<list.length;i++){\n      let opt = document.createElement("option");\n      opt.value = list[i].val;  //value値\n      opt.text = list[i].txt;   //テキスト値\n      document.getElementById("PullDownList").appendChild(opt);\n    }\n  };\n')])])]),e("div",{staticClass:"language-一度だけ実行(セレクトボックスが複数の場合).js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('function readFirst(){\n    //プルダウンリストをループ処理で値を取り出してセレクトボックスにセットする\n\tlet opt = document.createElement("option");\n\tlet tmp = document.getElementsByClassName("PullDownList");\n\tfor(var i=0;i<list.length;i++){\n\t\tfor(var j=0;j<tmp.length;j++){\n\t\t\topt = document.createElement("option");\n\t\t\topt.value = list[i].val;  //value値\n\t\t\topt.text = list[i].txt;   //テキスト値\n\t\t\ttmp[j].appendChild(opt);\n\t\t}\n\t}\n  };\n')])])]),e("div",{staticClass:"language-プルダウンリスト.js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(' //プルダウンメニューの配列(動的に指定するためのリスト)\n var list = [\n    {val:"1", txt:"P1"},\n    {val:"2", txt:"P2"},\n    {val:"3", txt:"P3"},\n    {val:"4", txt:"P4"},\n    {val:"5", txt:"P5"},\n ];\n\n')])])]),e("h2",{attrs:{id:"作ったプルダウンの選択肢の情報を取得する"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#作ったプルダウンの選択肢の情報を取得する","aria-hidden":"true"}},[t._v("#")]),t._v(" 作ったプルダウンの選択肢の情報を取得する")]),t._v(" "),e("p",[t._v("いろいろ選択⇒実行という流れにしたいなら、ボタンを使うと良い。")]),t._v(" "),e("div",{staticClass:"language-情報取得ボタン.html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<input type="button" value="情報取得ボタン" onClick="get(\'PullDownList\')">\n\n')])])]),e("div",{staticClass:"language-情報取得.js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function get(idName) {\n    var chiceColor = document.getElementById(idName);\n    console.log(chiceColor.value);\n}\n")])])])])},[],!1,null,null,null);a.default=s.exports}}]);